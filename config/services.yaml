# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    # array/collection parameters
    app.supported_locales: ['en', 'de']
    app.site.key: "%env(string:SITE_KEY)%"
    app.site.name: "%env(string:SITE_NAME)%"
    app.xsl_converter.saxonc_enable: "%env(bool:SAXONC_ENABLE)%"
    app.xsl_converter_adapter.arguments: "%env(string:JAVA_BIN)% -jar %kernel.project_dir%/data/styles/bin/saxon9he.jar -s:%%source%% -xsl:%%xsl%% %%additional%%"

    app.mpdf-converter.arguments:
        config:
            fontDir: [ "%kernel.project_dir%/data/font" ]
            fontdata:
                pdffont:
                    R: 'Brill-Roman.ttf'
                    B: 'Brill-Bold.ttf'
                    I: 'Brill-Italic.ttf'
                    BI: 'Brill-Bold-Italic.ttf'
            default_font: pdffont
    
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            # we inject this into App\Service\ContentService
            $supportedLocales: '%app.supported_locales%'
            # we inject these into App\Controller\BaseController
            $dataDir: '%kernel.project_dir%/data'
            $siteKey: '%app.site.key%'
            # we inject this into Twig\AppExtension
            $publicDir: '%kernel.project_dir%/public'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    app.menu_builder:
        class: App\Menu\MenuBuilder
        arguments: ["@knp_menu.factory"]

    app.volumes_menu:
        class: Knp\Menu\MenuItem # the service definition requires setting the class
        factory: ["@app.menu_builder", createVolumesMenu]
        arguments: ["@request_stack"]
        tags:
            - { name: knp_menu.menu, alias: volumes } # The alias is what is used to retrieve the menu

    app.about_menu:
        class: Knp\Menu\MenuItem # the service definition requires setting the class
        factory: ["@app.menu_builder", createAboutMenu]
        arguments: ["@request_stack"]
        tags:
            - { name: knp_menu.menu, alias: about } # The alias is what is used to retrieve the menu
            
    # So we can inject @solr.client, see https://github.com/floriansemm/SolrBundle/issues/191#issuecomment-466101623
    FS\SolrBundle\SolrInterface: '@solr.client'
    
    # Override hydrator, see https://symfony.com/doc/4.4/service_container/service_decoration.html
    solr.doctrine.hydration.no_database_value_hydrator:
        class: App\Search\NoDatabaseValueHydratorWithChildren
        arguments: [ '@solr.meta.information.factory' ]

    # So we can inject @solarium.client_registry
    Nelmio\SolariumBundle\ClientRegistry: '@solarium.client_registry'
    
    app.xsl_converter.commandline_adapter:
        class: App\Service\Xsl\XsltCommandlineAdapter
        arguments: [ '%app.xsl_converter_adapter.arguments%', { xslpath: '%kernel.project_dir%/data/styles' } ]

    app.xsl_converter.saxonc_adapter:
        class: App\Service\Xsl\XsltSaxonProcessorAdapter
    
    App\Service\Xsl\XsltProcessor:
        calls:
            - [ setAdapter, [ "@= parameter('app.xsl_converter.saxonc_enable') ? service('app.xsl_converter.saxonc_adapter') : service('app.xsl_converter.commandline_adapter')" ]]
            
    App\Utils\MpdfConverter:
        arguments: [ '%app.mpdf-converter.arguments%' ]
        
    Octicons\Twig\OcticonTwigExtension:
            tags: ['twig.runtime']
